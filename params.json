{"name":"Languages JS","tagline":"Translation system in Javascript with the JSON format.","body":"# Languages.js\r\n\r\nVersion 1.0.0\r\n\r\n## Description\r\n\r\nTranslation system in Javascript with the JSON format.\r\n\r\n## Works with\r\n\r\n* Javascript\r\n* Node.js\r\n* AngularJS\r\n* Handlebars\r\n\r\n## Get Started\r\n\r\nFollow the steps below to start:\r\n\r\n1. Install the script\r\n\r\n        <script src=\"path/Languages.js\"></script>\r\n\r\n2. Initialize languages\r\n\r\n        Languages.init([id], [path], [callback]);\r\n\r\n        * id  : Identifier of the language in the JSON file.\r\n        * path (optional) : Path to the folder JSON files. Default: `languages/`\r\n        * callback (optional) : Function called when the JSON file is loaded\r\n\r\n    Example :\r\n\r\n        Languages.init(\"fr\", \"languages/\", function() {\r\n\r\n        });\r\n\r\n    If the type of `id` is an array, language is the browser among the identifiers of the array. If it is not found in the array, the first element of the array will be the default language\r\n\r\n     Example :\r\n\r\n        Languages.init([\"en\", \"fr\", \"jp\", \"es\"], \"languages/\", function() {\r\n\r\n        });\r\n\r\n3. To translate a sentence, use the identifier with the function `t()` in the callback function :\r\n\r\n        Languages.init(\"fr\", \"languages/\", function() {\r\n            var txt = \"HELLO_WORD\".t();\r\n        });\r\n\r\n4. To change the language :\r\n    \r\n        Languages.set(\"jp\", function() {\r\n            var txt = \"HELLO_WORD\".t();\r\n        });\r\n\r\n    > Think about the functions and remember to update your interface\r\n    \r\n    > Note that you can call a language of a country. Example :\r\n    >       Languages.init(\"en_US\", \"languages/\", function() {\r\n    >\r\n    >       });\r\n\r\n\r\n### NodeJS\r\n\r\n#### Installation\r\n\r\n    npm install languages-js\r\n    \r\n#### Usage\r\n\r\nThe code is very simple. You just get the `languages-js` module :\r\n\r\n    var Languages = require(\"languages-js\").Languages;\r\n    \r\n    Languages.init(\"fr\", \"languages/\", function() {\r\n    \t// Code\r\n    });\r\n    \r\n### AngularJS\r\n\r\n    var app = angular.module(\"app\", [\"Languages\"]);\r\n        \r\n    app.config([\"LanguagesProvider\", function(Languages) {\r\n            \r\n            Languages.init(\"fr\", \"../languages/\");\r\n            \r\n    }]);\r\n    \r\n### Handlebars\r\n\r\n    <p>{{t \"TEXT\"}}</p>\r\n    \r\nAnd more parameters :\r\n\r\nExample 1 :\r\n\r\n    <p>{{t \"NB_MSG\" nb=2}}</p>\r\n    \r\nExample 2 :\r\n\r\n    <p>{{t \"NB_MSG|EMPTY\" nb=1 if=true}}</p>\r\n    \r\nWith Express-hbs module :\r\n\r\n\r\n    var hbs = require('express-hbs');\r\n    var Languages = require(\"languages-js\").Languages;\r\n\r\n    Languages.require('express-hbs')\r\n\r\n    Languages.init(\"fr\", \"../languages/\");\r\n\r\n### Add a plugin system\r\n\r\nSometimes you want to have language files elsewhere for a plugin. Files are loaded and added language to the interface\r\n\r\n    Languages.init(\"en\", \"core/languages/\", function() {\r\n    \tvar txt = \"HELLO_WORD\".t();\r\n    });\r\n\tLanguages.add(\"en\", \"plugins/my_plugin/languages/\", \"plugin_name\", function() {\r\n    \tvar txt = \"plugin_name.HELLO_WORD\".t();\r\n    });\r\n\r\nUse the `add()` method and add the plugin name (namespace)\r\n\r\n## JSON configuration\r\n\r\nThe files must be defined in the `path` folder in `init()` method. The file name must be the identifier defined in the method `init()`. If possible, use the same name as the identifier of the browser (`navigator.language`)\r\n\r\nExample : `languages/fr_FR.json`, `languages/en_EN.json`, `languages/en_US.json`, etc.\r\n\r\nJSON file must have the following format:\r\n\r\n    [{\r\n        \"ID\": \"text\"\r\n    },\r\n    {\r\n        \"config\": {}\r\n    }]\r\n\r\nThe first entry in the table contains the identifiers with texts. The second contains the configuration values ​​as the plural.\r\n\r\nExample :\r\n\r\n    [{\r\n        \"HELLO_WORD\": \"Hello World\"\r\n    },\r\n    {\r\n        \"plurial\": {\r\n    \t\t\"p\": [\"s\"]\r\n    \t}\r\n    }]\r\n\r\nWith the above example, in the code, `\"HELLO_WORLD\".t()` returns `Hello World`\r\n\r\n### Plurial\r\n\r\nThe plural is defined in the JSON with the `plurial` key. Consider an example :\r\n\r\n    [{\r\n        \"NB_MSG\": \"You have %d post%p\"\r\n    },\r\n    {\r\n        \"plurial\": {\r\n    \t\t\"p\": [\"s\"]\r\n    \t}\r\n    }]\r\n\r\nHere, the `%d `parameter specifies an integer number is expected for `NB_MSG` id. `%p` indicates that the plural of the term is used. The plural will be based on the value of `%d`. In `plurial` parameter, we define a rule. For `%p` in the plural, the letter `s` is added at the end.\r\n\r\nThe result will be :\r\n\r\n    var nb_msg = 1;\r\n    \"NB_MSG\".t(nb_msg); // You have 1 post\r\n\r\n    nb_msg = 2;\r\n    \"NB_MSG\".t(nb_msg); // You have 2 posts\r\n\r\n#### Plural feature\r\n\r\nIt may be that the plural is different depending on a word. You can set it like this:\r\n\r\n    [{\r\n        \"NB_ACC\": \"You have %d accessor%p1\"\r\n    },\r\n    {\r\n        \"plurial\": {\r\n    \t\t\"p\": [\"s\"],\r\n            \"p1\": [\"ies\", \"y\"]\r\n    \t}\r\n    }]\r\n\r\nHere, we define a new rule of plural.\r\n\r\nThe result will be :\r\n\r\n    var nb = 1;\r\n    \"NB_ACC\".t(nb); // You have 1 accessory\r\n\r\n    nb_msg = 2;\r\n    \"NB_ACC\".t(nb); // You have 2 accessories\r\n\r\nThus, the table is defined as follows:\r\n\r\n    \"p[0-9]+\": [plurial, singular, duel, triel, etc.]\r\n\r\n## Parameters\r\n\r\nIn a string, you can add parameters :\r\n\r\n    \"NAME\": \"You name is %s, you're %d\"\r\n\r\nThe code will :\r\n\r\n    \"NAME\".t(\"Sam\", 21);\r\n\r\n* `%s` : string\r\n* `%d` : decimal\r\n* `%p` : indicates a plural (see above)\r\n\r\n## Advanced Usage\r\n\r\nIt is possible to couple id :\r\n\r\n    [{\r\n        \"LOGIN\": \"Login\",\r\n        \"LOGOUT\": \"Logout\"\r\n    },\r\n    {\r\n        \"plurial\": {}\r\n    }]\r\n\r\nThe code :\r\n\r\n    \"LOGIN|LOGOUT\".t(true);\r\n\r\nIf the parameter is true, it will take the first identifier (separated by |). Otherwise, it takes the second\r\n\r\nOther example :\r\n\r\n    [{\r\n    \t\"NB_MSG\": \"You have %d post%p\",\r\n    \t\"EMPTY\": \"You have no messages !\"\r\n    },\r\n    {\r\n        \"plurial\": {\r\n    \t\t\"p\": [\"s\"]\r\n    \t}\r\n    }]\r\n\r\nThe code : \r\n\r\n     var nb_msg = 0;\r\n     \"NB_MSG|EMPTY\".t(nb_msg > 0, nb_msg); // You have no messages !\r\n\r\n     nb_msg = 2;\r\n    \"NB_MSG|EMPTY\".t(nb_msg > 0, nb_msg); // You have 2 posts !\r\n\r\nFinally, if the identifiers are separated by a space, you can use multiple identifiers :\r\n\r\n    [{\r\n        \"LOGIN\": \"Login\",\r\n        \"WITH\": \"with\"\r\n    },\r\n    {\r\n        \"plurial\": {}\r\n    }]\r\n\r\nThe code :\r\n\r\n    \"LOGIN WITH\".t() // Login with\r\n    \r\n## License\r\n\r\nMIT. Free for commercial use.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}